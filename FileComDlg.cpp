
// FileComDlg.cpp: 实现文件
//

#include "stdafx.h"
#include "FileCom.h"
#include "FileComDlg.h"
#include "afxdialogex.h"
#include "io.h"
#include "fcntl.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif

//定义八位数组长度用来存储编码
int num[8];

// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CFileComDlg 对话框



CFileComDlg::CFileComDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_FILECOM_DIALOG, pParent)
	, m_chosen_file(_T(""))
	, m_com_file(_T(""))
	, m_uncom_file(_T(""))
	, m_persent(_T(""))
	, m_origin(_T(""))
	, m_now(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CFileComDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_BROT_EDIT, m_chosen_file);
	DDX_Text(pDX, IDC_COMT_EDIT, m_com_file);
	DDX_Text(pDX, IDC_UNCOMT_EDIT, m_uncom_file);
	DDX_Text(pDX, IDC_PER_EDIT, m_persent);
	DDX_Text(pDX, IDC_EDIT1, m_origin);
	DDX_Text(pDX, IDC_EDIT2, m_now);
}

BEGIN_MESSAGE_MAP(CFileComDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BRO_BUTTON, &CFileComDlg::OnBnClickedBroButton)
	ON_BN_CLICKED(IDC_COM_BUTTON, &CFileComDlg::OnBnClickedComButton)
	ON_BN_CLICKED(IDC_UNCOM_BUTTON, &CFileComDlg::OnBnClickedUncomButton)
END_MESSAGE_MAP()


// CFileComDlg 消息处理程序

BOOL CFileComDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CFileComDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CFileComDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CFileComDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


/*
	The following are the main logic written by myself.
	I mean that it does not include the UI generated by MFC.
*/

void CFileComDlg::OnBnClickedBroButton()
{
	//初始化各个文本框文字
	UpdateData(TRUE);
	m_chosen_file = _T("");
	m_com_file = _T("");
	m_uncom_file = _T("");
	UpdateData(FALSE);

	//打开文件选择框，选择文件
	HWND hwnd = GetSafeHwnd();   //得到窗口句柄
	CString filePath = _T("");	//得到文件路径
	LPMALLOC pMalloc;
	if (::SHGetMalloc(&pMalloc) == NOERROR)	//取得IMalloc分配器接口
	{
		CString strFile = _T("");

		CFileDialog    dlgFile(TRUE, NULL, NULL, OFN_HIDEREADONLY, 
								_T("All Files (*.*)|*.*||"), NULL);

		if (dlgFile.DoModal())
		{
			strFile = dlgFile.GetPathName();
		}
		//将获取的文件名输出到选中文件文本框
		UpdateData(TRUE);
		m_chosen_file = strFile;
		UpdateData(FALSE);

	}
}

/*
	This is the method to compress the file chosen by the user.
*/
void CFileComDlg::OnBnClickedComButton()
{
	//打开文件选择框，选择文件
	HWND hwnd = GetSafeHwnd();   //得到窗口句柄
	CString filePath = _T("");	//得到文件路径
	LPMALLOC pMalloc;
	if (::SHGetMalloc(&pMalloc) == NOERROR)	//取得IMalloc分配器接口
	{
		CString strFile = _T("");

		CFileDialog    dlgFile(TRUE, NULL, NULL, OFN_HIDEREADONLY, 
								_T("All Files (*.*)|*.*||"), NULL);

		if (dlgFile.DoModal())
		{
			strFile = dlgFile.GetPathName();
		}
		UpdateData(TRUE);
		m_com_file = strFile;
		UpdateData(FALSE);

	}

	//打开选中文件
	FILE *in = _tfopen(m_chosen_file, _T("rb"));
	//创建权重数组
	int weight[256];
	//初始化权重数组
	for (int i = 0; i < 256; i++) {
		weight[i] = 0;
	}

	//按照字节流读取权重存入数组
	GetAndSaveWeight(in, weight);
	//创建哈夫曼树节点数组
	HTNode htNode[511];
	//根据权重生成哈夫曼树
	GenerateHaffmanTree(weight, htNode);
	//获取生成哈夫曼树的深度
	int depth;
	depth = GetDepth(htNode, htNode[510]);
	
	//建立用来存储新编码的数组
	char* encode[256];
	for (int i = 0; i < 256; i++) {
		encode[i] = (char*)malloc(depth * sizeof(char));
	}
	char *s;
	s = (char*)malloc(depth * sizeof(char));
	//通过生成的哈夫曼树获取新编码
	GenerateNewCode(depth, s, encode, 0, htNode, 510);

	//获取压缩文件大小，计算压缩比会使用
	fseek(in, 0, SEEK_SET);
	fseek(in, 0L, SEEK_END);
	int sizeIn = ftell(in);
	CString strIn;
	strIn.Format(_T("%d Bytes"), sizeIn / 1024);

	//将文件大小，字符权重，文件扩展名存入压缩文件文件头
	HEAD h;
	h.length = sizeIn;
	for (int r = 0; r < 256; r++) {
		h.weight[r] = weight[r];
	}
	CString splittedStr;
	splittedStr = GetExtensionOfFile(m_chosen_file);
	//将获取到的CString类型文件扩展名转为char[]类型
	LPCTSTR p = splittedStr.GetBuffer(0);
	splittedStr.ReleaseBuffer();
	strcpy_s(h.type, splittedStr.GetLength() + 1, CT2CA(p));
	h.type[splittedStr.GetLength()] = '\0';

	//按照新编码写压缩文件
	FILE *out = _tfopen(m_com_file + ".pjy", _T("wb"));
	//写入文件头
	fwrite(&h, sizeof(HEAD), 1, out);

	fseek(in, 0, SEEK_SET);
	//向压缩文件里写入新编码  
	int pos = 0;
	char value = 0;
	//重新读取一遍旧文件以保证存入压缩文件的字符顺序是正确的
	int char_temp = fgetc(in);
	while (char_temp != EOF)
	{
		if (feof(in))
			break;
		char* code = encode[char_temp];
		for (int i = 0; encode[char_temp][i] != '\0'; i++)
		{
			//移位运算
			value = value << 1;
			if (code[i] == '1')   
			{	//拼接运算
				value = value | 1;
			}
			//满8位写入文件
			if (++pos == 8)     
			{
				fputc(value, out);
				value = 0;
				pos = 0;
			}
		}

		char_temp = fgetc(in);
	}
	//最后的编码不满足一个字节，通过移位运算补0
	if (pos)     
	{
		value = value << (8 - pos);
		fputc(value, out);
	}
	fclose(in);
	fclose(out);

	UpdateData(TRUE);
	m_origin = _T("");
	m_now = _T("");
	m_persent = _T("");
	UpdateData(FALSE);

	//输出原文件大小
	UpdateData(TRUE);
	m_origin = m_origin + strIn;
	UpdateData(FALSE);

	//计算并输出压缩文件大小
	out = _tfopen(m_com_file + ".pjy", _T("rb"));
	fseek(out, 0L, SEEK_END);
	int sizeOut = ftell(out);
	CString strOut;
	strOut.Format(_T("%d Bytes"), sizeOut / 1024);
	fclose(out);
	UpdateData(TRUE);
	m_now = m_now + strOut;
	UpdateData(FALSE);
	//计算并输出压缩比
	CString strPercent;
	strPercent.Format(_T("%.2f"), sizeOut*(100.0) / sizeIn);
	UpdateData(TRUE);
	m_persent = m_persent + strPercent;
	UpdateData(FALSE);

	//弹出窗口显示压缩成功
	AfxMessageBox(_T("Compressiong Finished!"));
}

/*
	This is the method to uncompress the file.
*/
void CFileComDlg::OnBnClickedUncomButton()
{
	//打开文件选择框，选择文件
	HWND hwnd = GetSafeHwnd();   //得到窗口句柄
	CString filePath = _T("");	//得到文件路径
	LPMALLOC pMalloc;
	if (::SHGetMalloc(&pMalloc) == NOERROR)	//取得IMalloc分配器接口
	{
		CString strFile = _T("");

		CFileDialog    dlgFile(TRUE, NULL, NULL, OFN_HIDEREADONLY,
								_T("All Files (*.*)|*.*||"), NULL);

		if (dlgFile.DoModal())
		{
			strFile = dlgFile.GetPathName();
		}
		//输出选中的文件名
		UpdateData(TRUE);
		m_uncom_file = strFile;
		UpdateData(FALSE);

	}

	//打开选中的压缩文件
	FILE *in = _tfopen(m_chosen_file, _T("rb"));
	//读取文件头以获取文件类型等信息
	HEAD h;
	fread(&h, sizeof(HEAD), 1, in);//读文件头
	char fileType[5];
	strcpy(fileType, h.type);
	int fileLength = h.length;

	//建立并根据文件头信息初始化权重数组
	int weight[256];
	for (int i = 0; i < 256; i++) {
		weight[i] = h.weight[i];
	}

	//////////根据读取信息生成哈夫曼树，具体操作过程基本同压缩文件过程//////////
	HTNode htNode[511];
	GenerateHaffmanTree(weight, htNode);
	int depth;
	depth = GetDepth(htNode, htNode[510]);
	char* encode[256];
	for (int i = 0; i < 256; i++) {
		encode[i] = (char*)malloc(depth * sizeof(char));
	}
	char *s;
	s = (char*)malloc(depth * sizeof(char));
	GenerateNewCode(depth, s, encode, 0, htNode, 510);

	//根据读取的原始文件类型命名解压文件名
	CString strRight;
	strRight = fileType;
	UpdateData(TRUE);
	m_uncom_file = m_uncom_file + _T(".") + strRight;
	UpdateData(FALSE);

	//将解码信息写入解压文件
	FILE *out = _tfopen(m_uncom_file, _T("wb"));

	char str[1000];
	int i, j, k, temp = 0;
	int index;
	int sum = 0;

	while (!feof(in))
	{
		if (sum == h.length) break;

		int data = fgetc(in);
		if (data == -1) break;

		else
		{
			index = 0;
		}
		if (data == -1) break;

		//数组清零
		memset(num, 0, sizeof(num));

		//将读取到的数据转换成二进制
		DataToBytes(data);
		i = temp;

		//将转换后的二进制数变为字符串

		//逐位写入 
		for (k = 7; k >= index; i++, k--)
		{
			if (num[k])
				str[i] = '1';
			else
				str[i] = '0';

			str[i + 1] = '\0';

			//检查当前字符串是否已是某一字符的编码，是则写入（哈夫曼编码没有二义性）。
			for (j = 0; j < 256; j++)
			{
				if (strcmp(str, encode[j]) == 0)
				{
					fputc(j, out);
					sum += 1;
					fflush(out);
					j = 256;
					i = -1;
				}
			}
		}
		if (i)
		{
			temp = i;
		}
		else
		{
			temp = 0;
		}
	}
	sum = 0;

	fclose(in);
	fclose(out);

	//弹出提示框显示解压完成
	AfxMessageBox(_T("Uncompression Finished!"));
}

/*
	This is the method to save the weight of different chars.
*/
void CFileComDlg::GetAndSaveWeight(FILE* in, int* weight) {
	byte num;
	//按字节读取文件，存入权重数组
	int i = fread(&num, sizeof(byte), 1, in);
	weight[num]++;
	while (i != 0) {
		i = fread(&num, sizeof(byte), 1, in);
		weight[num]++;
	}
}

/*
	This method is used to create a haffman-tree.
*/
void CFileComDlg::GenerateHaffmanTree(int *weight, HTNode* htNode) {
	int i;
	//将已读入字符的权重存入哈夫曼树节点并初始化关系信息
	for (i = 0; i < 256; i++) {
		htNode[i].weight = weight[i];
		htNode[i].parent = -1;
		htNode[i].lchild = -1;
		htNode[i].rchild = -1;
	}
	//初始化256之后空的哈夫曼树节点包含的变量值
	while (i < 511) {
		htNode[i].weight = -1;
		htNode[i].parent = -2;
		htNode[i].lchild = -1;
		htNode[i].rchild = -1;
		i++;
	}


	int last = 256;
	int minmum1Position;
	int minmum1;
	int minmum2Position;
	int minmum2;

	//找到最小的两个节点，逐步生成哈夫曼树
	while (last != 511) {
		int init = 0;
		for (int u = 0; u < 511; u++) {
			//第一个节点
			if (init == 0 && htNode[u].parent == -1) {

				minmum1Position = u;
				minmum1 = htNode[minmum1Position].weight;
				init = 1;
			}
			//第二个节点
			else if (init == 1 && htNode[u].parent == -1) {
				minmum2Position = u;
				minmum2 = htNode[minmum2Position].weight;
				init = 2;
			}
			//第三个及以后的节点
			else if (htNode[u].weight < max(minmum1, minmum2) && htNode[u].parent == -1) {

				if (minmum1 != minmum2 && minmum1 == max(minmum1, minmum2)) {
					minmum1 = htNode[u].weight;
					minmum1Position = u;
				}
				else if (minmum1 != minmum2 && minmum2 == max(minmum1, minmum2)) {
					minmum2 = htNode[u].weight;
					minmum2Position = u;
				}
				else if (minmum1 == minmum2) {
					minmum1 = htNode[u].weight;
					minmum1Position = u;
				}

			}

		}
		//创建新节点并连接好与旧节点的关系
		htNode[minmum1Position].parent = last;
		htNode[minmum2Position].parent = last;
		htNode[last].lchild = minmum1Position;
		htNode[last].rchild = minmum2Position;
		htNode[last].weight = htNode[minmum1Position].weight + htNode[minmum2Position].weight;
		htNode[last].parent = -1;
		last++;
	}
}

/*
	This method is used to get the depth of the haffman-tree.
*/
int CFileComDlg::GetDepth(HTNode *htNode, HTNode h) {
	if (h.lchild == -1 && h.rchild == -1) {
		return 0;
	}
	else {
		return (1 + max(GetDepth(htNode, htNode[h.lchild]), GetDepth(htNode, htNode[h.rchild])));
	}
}

/*
	This method is to generate the new codes coded according to the haffman-tree.
*/
void CFileComDlg::GenerateNewCode(int depth, char *s, char** encode, int i, HTNode *htNode, int h) {
	//由根节点开始遍历所有叶子节点
	if (htNode != NULL)
	{
		if (htNode[h].lchild == -1 && htNode[h].rchild == -1)
		{
			s[i] = '\0';
			strcpy(encode[h], s);

		}
		else
		{
			s[i] = '0';
			GenerateNewCode(depth, s, encode, i + 1, htNode, htNode[h].lchild);
			s[i] = '1';
			GenerateNewCode(depth, s, encode, i + 1, htNode, htNode[h].rchild);
		}
	}
}

/*
	Get the file extension so as to make it possible for uncompression.
*/
CString CFileComDlg::GetExtensionOfFile(CString strFileName)
{
	return strFileName.Right(strFileName.GetLength() - strFileName.ReverseFind('.') - 1);
}

/*
	Change the data typed int to bytes for better using.
*/
int  CFileComDlg::DataToBytes(int data)
{
	int i = 0;
	while (data)
	{
		num[i++] = data % 2;
		data = data / 2;
	}
	return i;
}
